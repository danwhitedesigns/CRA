{"version":3,"sources":["Components/PokemonCard.js","Components/SearchForm.js","Components/PokemonApp.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["PokemonCard","props","state","name","imageUrl","pokemonIndex","this","url","split","length","setState","filterText","imageAlt","displayClass","includes","toLowerCase","Col","md","lg","className","Card","CardBody","CardTitle","map","char","charAt","toUpperCase","substring","join","alt","src","Component","SearchForm","handleFilterTextChange","bind","e","onFilterTextChange","target","value","Container","Row","Input","type","placeholder","onChange","PokemonApp","pokemon","a","Axios","get","response","data","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3dd44545.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Col, Card, CardBody, CardTitle } from 'reactstrap';\r\n\r\nclass PokemonCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageUrl: '',\r\n            pokemonIndex: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { name, url } = this.props;\r\n        const pokemonIndex = url.split('/')[url.split('/').length - 2];\r\n        const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemonIndex}.png`;\r\n\r\n        this.setState({ name, imageUrl, pokemonIndex });\r\n    }\r\n\r\n    render() {\r\n        const filterText = this.props.filterText;\r\n        const imageAlt = `pokemon ${this.state.name}`;\r\n        var displayClass = \"\";\r\n        if (this.state.name.includes(filterText.toLowerCase())) {\r\n            displayClass = \"d-block\";\r\n\r\n        } else {\r\n            displayClass = \"d-none\";\r\n        }\r\n        return (\r\n            <Col md={4} lg={3} className={`mb-3 ${displayClass}`}>\r\n                <Card>\r\n                    <h4 className=\"card-header\">{this.state.pokemonIndex}</h4>\r\n                    <CardBody className=\"mx-auto\">\r\n                        <CardTitle className=\"text-center\"><h6>{this.state.name.toLowerCase().split(\" \").map(char => char.charAt(0).toUpperCase() + char.substring(1)).join(' ')}</h6></CardTitle>\r\n                        <img alt={imageAlt} src={this.state.imageUrl} className=\"img-fluid d-block mx-auto\" />\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokemonCard","import React, { Component } from \"react\";\r\nimport { Container, Row, Col, Input } from 'reactstrap';\r\n\r\nclass SearchForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n    }\r\n\r\n    handleFilterTextChange(e) {\r\n        this.props.onFilterTextChange(e.target.value);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"justify-content-center mt-3\">\r\n                    <Col md={4}>\r\n                        <Input className=\"form-control\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" onChange={this.handleFilterTextChange} />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchForm","import React, { Component } from \"react\";\r\nimport PokemonCard from './PokemonCard'\r\nimport SearchForm from './SearchForm';\r\nimport Axios from 'axios';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass PokemonApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const limit = 1118;\r\n        this.state = {\r\n            url: `https://pokeapi.co/api/v2/pokemon/?limit=${limit}`,\r\n            pokemon: null,\r\n            filterText: ''\r\n        }\r\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n    }\r\n\r\n    handleFilterTextChange(filterText) {\r\n        this.setState({\r\n            filterText: filterText\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await Axios.get(this.state.url);\r\n        this.setState({ pokemon: response.data['results'] })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row className=\"mt-5 mb-3\">\r\n                    <Col className=\"text-center\">\r\n                        <h1>Pokemon Search</h1>\r\n                    </Col>\r\n                </Row>\r\n                <SearchForm filterText={this.state.filterText} onFilterTextChange={this.handleFilterTextChange} />\r\n                {\r\n                    this.state.pokemon ? (\r\n                            <Row className=\"mt-3 justify-content-center\">\r\n                                {this.state.pokemon.map(pokemon => (\r\n                                    <PokemonCard key={pokemon.name} name={pokemon.name} url={pokemon.url} filterText={this.state.filterText} />\r\n                                ))}\r\n                            </Row>\r\n                    ) : (<Container className=\"text-center mt-3\"><h4>Loading Pokemon...</h4></Container>)\r\n                }\r\n            </Container>\r\n        )\r\n    };\r\n}\r\nexport default PokemonApp","import React, { Component } from \"react\";\r\nimport PokemonApp from './Components/PokemonApp';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const limit = 1118;\r\n        this.state = {\r\n            url: `https://pokeapi.co/api/v2/pokemon/?limit=${limit}`,\r\n            pokemon: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <PokemonApp />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}